¾
dC:\cursos\CleanArquitecture\CleanArquitecture\CleanArquitecture.API\Controllers\AccountController.cs
	namespace 	
CleanArchitecture
 
. 
API 
.  
Controllers  +
{ 
[ 
ApiController 
] 
[ 
Route 

(
 
$str  
)  !
]! "
public		 

class		 
AccountController		 "
:		" #
ControllerBase		# 1
{

 
private 
readonly 
IAuthService %
_authService& 2
;2 3
public 
AccountController  
(  !
IAuthService! -
authService. 9
)9 :
{ 	
_authService 
= 
authService &
;& '
} 	
[ 	
HttpPost	 
( 
$str 
) 
] 
public 
async 
Task 
< 
ActionResult &
<& '
AuthResponse' 3
>3 4
>4 5
Login6 ;
(; <
[< =
FromBody= E
]E F
AuthRequestG R
requestS Z
)Z [
{[ \
return 
Ok 
( 
await 
_authService (
.( )
Login) .
(. /
request/ 6
)6 7
)7 8
;8 9
} 	
[ 	
HttpPost	 
( 
$str 
) 
] 
public 
async 
Task 
< 
ActionResult &
<& ' 
RegistrationResponse' ;
>; <
>< =
Register> F
(F G
[G H
FromBodyH P
]P Q
RegistrationRequestR e
requestf m
)m n
{ 	
return 
Ok 
( 
await 
_authService (
.( )
Register) 1
(1 2
request2 9
)9 :
): ;
;; <
} 	
} 
} º
eC:\cursos\CleanArquitecture\CleanArquitecture\CleanArquitecture.API\Controllers\DirectorController.cs
	namespace 	
CleanArchitecture
 
. 
API 
.  
Controllers  +
{ 
[		 
ApiController		 
]		 
[

 
Route

 

(


 
$str

  
)

  !
]

! "
public 

class 
DirectorController #
:# $
ControllerBase$ 2
{ 
private 
	IMediator 
	_midiator #
;# $
public 
DirectorController !
(! "
	IMediator" +
midiator, 4
)4 5
{ 	
	_midiator 
= 
midiator  
;  !
} 	
[ 	
HttpPost	 
( 
Name 
= 
$str (
)( )
]) *
[ 	
	Authorize	 
( 
Roles 
= 
$str )
)) *
]* +
[ 	 
ProducesResponseType	 
( 
( 
int "
)" #
HttpStatusCode# 1
.1 2
OK2 4
)4 5
]5 6
public 
async 
Task 
< 
ActionResult &
<& '
int' *
>* +
>+ ,
CreateDirector- ;
(; <
[< =
FromBody= E
]E F!
CreateDirectorCommandG \
command] d
)d e
{ 	
return 
await 
	_midiator "
." #
Send# '
(' (
command( /
)/ 0
;0 1
} 	
} 
} Î 
eC:\cursos\CleanArquitecture\CleanArquitecture\CleanArquitecture.API\Controllers\StreamerController.cs
	namespace		 	
CleanArchitecture		
 
.		 
API		 
.		  
Controllers		  +
{

 
[ 
ApiController 
] 
[ 
Route 

(
 
$str  
)  !
]! "
public 

class 
StreamerController #
:# $
ControllerBase% 3
{ 
private 
readonly 
	IMediator "
	_mediator# ,
;, -
public 
StreamerController !
(! "
	IMediator" +
mediator, 4
)4 5
{ 	
	_mediator 
= 
mediator  
;  !
} 	
[ 	
HttpPost	 
( 
Name 
= 
$str (
)( )
]) *
[ 	
	Authorize	 
( 
Roles 
= 
$str )
)) *
]* +
[ 	 
ProducesResponseType	 
( 
( 
int "
)" #
HttpStatusCode# 1
.1 2
OK2 4
)4 5
]5 6
public 
async 
Task 
< 
ActionResult &
<& '
int' *
>* +
>+ ,
CreateStreamer- ;
(; <
[< =
FromBody= E
]E F!
CreateStreamerCommandG \
command] d
)d e
{ 	
return 
await 
	_mediator "
." #
Send# '
(' (
command( /
)/ 0
;0 1
} 	
[ 	
HttpPut	 
( 
Name 
= 
$str '
)' (
]( )
[ 	 
ProducesResponseType	 
( 
StatusCodes )
.) *
Status204NoContent* <
)< =
]= >
[   	 
ProducesResponseType  	 
(   
StatusCodes   )
.  ) *
Status404NotFound  * ;
)  ; <
]  < =
[!! 	'
ProducesDefaultResponseType!!	 $
]!!$ %
public"" 
async"" 
Task"" 
<"" 
ActionResult"" &
>""& '
UpdateStreamer""( 6
(""6 7
[""7 8
FromBody""8 @
]""@ A!
UpdateStreamerCommand""B W
command""X _
)""_ `
{## 	
await$$ 
	_mediator$$ 
.$$ 
Send$$  
($$  !
command$$! (
)$$( )
;$$) *
return%% 
	NoContent%% 
(%% 
)%% 
;%% 
}&& 	
[(( 	

HttpDelete((	 
((( 
$str(( 
,(( 
Name(( 
=((  !
$str((! 1
)((1 2
]((2 3
[)) 	 
ProducesResponseType))	 
()) 
StatusCodes)) )
.))) *
Status204NoContent))* <
)))< =
]))= >
[** 	 
ProducesResponseType**	 
(** 
StatusCodes** )
.**) *
Status404NotFound*** ;
)**; <
]**< =
[++ 	'
ProducesDefaultResponseType++	 $
]++$ %
public,, 
async,, 
Task,, 
<,, 
ActionResult,, &
>,,& '
DeleteStreamer,,( 6
(,,6 7
int,,7 :
id,,; =
),,= >
{-- 	
var.. 
command.. 
=.. 
new.. !
DeleteStreamerCommand.. 3
{// 
Id00 
=00 
id00 
}11 
;11 
await22 
	_mediator22 
.22 
Send22  
(22  !
command22! (
)22( )
;22) *
return33 
	NoContent33 
(33 
)33 
;33 
}44 	
}55 
}66 Ì
bC:\cursos\CleanArquitecture\CleanArquitecture\CleanArquitecture.API\Controllers\VideoController.cs
	namespace 	
CleanArchitecture
 
. 
API 
.  
Controllers  +
{ 
[		 
ApiController		 
]		 
[

 
Route

 

(


 
$str

  
)

  !
]

! "
public 

class 
VideoController  
:  !
ControllerBase" 0
{ 
private 
readonly 
	IMediator "
	_mediator# ,
;, -
public 
VideoController 
( 
	IMediator (
mediator) 1
)1 2
{ 	
	_mediator 
= 
mediator  
;  !
} 	
[ 	
HttpGet	 
( 
$str 
, 
Name "
=# $
$str$ .
). /
]/ 0
[ 	
	Authorize	 
] 
[ 	 
ProducesResponseType	 
( 
typeof $
($ %
IEnumerable% 0
<0 1
VideosVm1 9
>9 :
): ;
,; <
(< =
int= @
)@ A
HttpStatusCodeA O
.O P
OKP R
)R S
]S T
public 
async 
Task 
< 
ActionResult &
<& '
IEnumerable' 2
<2 3
VideosVm3 ;
>; <
>< =
>= >
GetVideosByUsername? R
(R S
stringS Y
usernameZ b
)b c
{ 	
var 
query 
= 
new 
GetVideosListQuery .
(. /
username/ 7
)7 8
;8 9
var 
videos 
= 
await 
	_mediator (
.( )
Send) -
(- .
query. 3
)3 4
;4 5
return 
Ok 
( 
videos 
) 
; 
} 	
} 
} Ü
`C:\cursos\CleanArquitecture\CleanArquitecture\CleanArquitecture.API\Errors\CodeErrorException.cs
	namespace 	
CleanArchitecture
 
. 
API 
.  
Errors  &
{ 
public 

class 
CodeErrorException #
:$ %
CodeErrorResponse& 7
{ 
public 
string 
? 
Details 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
CodeErrorException !
(! "
int" %

statusCode& 0
,0 1
string2 8
?8 9
message: A
=B C
nullD H
,H I
stringJ P
?P Q
detailsR Y
=Z [
null\ `
)` a
:b c
based h
(h i

statusCodei s
,s t
messageu |
)| }
{ 	
Details 
= 
details 
; 
}		 	
}

 
} ù
_C:\cursos\CleanArquitecture\CleanArquitecture\CleanArquitecture.API\Errors\CodeErrorResponse.cs
	namespace 	
CleanArchitecture
 
. 
API 
.  
Errors  &
{ 
public 

class 
CodeErrorResponse "
{ 
public 
int 

StatusCode 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
? 
Message 
{  
get! $
;$ %
set& )
;) *
}+ ,
=- .
string/ 5
.5 6
Empty6 ;
;; <
public 
CodeErrorResponse  
(  !
int! $

statusCode% /
,/ 0
string1 7
?7 8
message9 @
=A B
nullC G
)G H
{		 	

StatusCode

 
=

 

statusCode

 #
;

# $
Message 
= 
message 
??  '
GetDefaultMessageStatusCode! <
(< =

statusCode= G
)G H
;H I
} 	
private 
string '
GetDefaultMessageStatusCode 2
(2 3
int3 6

statusCode7 A
)A B
{ 	
return 

statusCode 
switch $
{ 
$num 
=> 
$str 7
,7 8
$num 
=> 
$str @
,@ A
$num 
=> 
$str ;
,; <
$num 
=> 
$str <
,< =
_ 
=> 
string 
. 
Empty  
} 
; 
} 	
} 
} Ý&
eC:\cursos\CleanArquitecture\CleanArquitecture\CleanArquitecture.API\Middleware\ExceptionMiddleware.cs
	namespace 	
CleanArchitecture
 
. 
API 
.  

Middleware  *
{ 
public 

class 
ExceptionMiddleware $
{		 
private

 
readonly

 
RequestDelegate

 (
_next

) .
;

. /
private 
readonly 
ILogger  
<  !
ExceptionMiddleware! 4
>4 5
_logger6 =
;= >
private 
readonly 
IHostEnvironment )
_env* .
;. /
public 
ExceptionMiddleware "
(" #
RequestDelegate# 2
next3 7
,7 8
ILogger9 @
<@ A
ExceptionMiddlewareA T
>T U
loggerV \
,\ ]
IHostEnvironment^ n
envo r
)r s
{ 	
_next 
= 
next 
; 
_logger 
= 
logger 
; 
_env 
= 
env 
; 
} 	
public 
async 
Task 
InvokeAsync %
(% &
HttpContext& 1
context2 9
)9 :
{ 	
try 
{ 
await 
_next 
( 
context #
)# $
;$ %
} 
catch 
( 
	Exception 
ex 
)  
{ 
_logger 
. 
LogError  
(  !
ex! #
,# $
ex% '
.' (
Message( /
)/ 0
;0 1
context 
. 
Response  
.  !
ContentType! ,
=- .
$str/ A
;A B
var 

statusCode 
=  
(! "
int" %
)% &
HttpStatusCode& 4
.4 5
InternalServerError5 H
;H I
var   
result   
=   
string   #
.  # $
Empty  $ )
;  ) *
switch"" 
("" 
ex"" 
)"" 
{## 
case$$ 
NotFoundException$$ *
notFoundException$$+ <
:$$< =

statusCode%% "
=%%# $
(%%% &
int%%& )
)%%) *
HttpStatusCode%%* 8
.%%8 9
NotFound%%9 A
;%%A B
break&& 
;&& 
case'' 
ValidationException'' ,
validationException''- @
:''@ A

statusCode(( "
=((# $
(((% &
int((& )
)(() *
HttpStatusCode((* 8
.((8 9

BadRequest((9 C
;((C D
var)) 
validationErros)) +
=)), -
JsonConvert)). 9
.))9 :
SerializeObject)): I
())I J
validationException))J ]
.))] ^
Errors))^ d
)))d e
;))e f
result** 
=**  
JsonConvert**! ,
.**, -
SerializeObject**- <
(**< =
new**= @
CodeErrorException**A S
(**S T

statusCode**T ^
,**^ _
ex**_ a
.**a b
Message**b i
,**i j
validationErros**j y
)**y z
)**z {
;**{ |
break++ 
;++ 
case,,  
BadRequestExceptions,, - 
badRequestExceptions,,. B
:,,B C

statusCode-- "
=--# $
(--% &
int--& )
)--) *
HttpStatusCode--* 8
.--8 9

BadRequest--9 C
;--C D
break.. 
;.. 
default// 
:// 
break00 
;00 
}11 
if22 
(22 
string22 
.22 
IsNullOrEmpty22 (
(22( )
result22) /
)22/ 0
)220 1
{33 
result44 
=44 
JsonConvert44 (
.44( )
SerializeObject44) 8
(448 9
new449 <
CodeErrorException44= O
(44O P

statusCode44P Z
,44Z [
ex44\ ^
.44^ _
Message44_ f
,44f g
ex44h j
.44j k

StackTrace44k u
)44u v
)44v w
;44w x
}55 
context77 
.77 
Response77  
.77  !

StatusCode77! +
=77, -

statusCode77. 8
;778 9
await?? 
context?? 
.?? 
Response?? &
.??& '

WriteAsync??' 1
(??1 2
result??2 8
)??8 9
;??9 :
}AA 
}BB 	
}CC 
}DD Ç
NC:\cursos\CleanArquitecture\CleanArquitecture\CleanArquitecture.API\Program.cs
var 
builder 
= 
WebApplication 
. 
CreateBuilder *
(* +
args+ /
)/ 0
;0 1
builder

 
.

 
Services

 
.

 
AddControllers

 
(

  
)

  !
;

! "
builder 
. 
Services 
. #
AddEndpointsApiExplorer (
(( )
)) *
;* +
builder 
. 
Services 
. 
AddSwaggerGen 
( 
)  
;  !
builder 
. 
Services 
. &
AddInfraestructureServices +
(+ ,
builder, 3
.3 4
Configuration4 A
)A B
;B C
builder 
. 
Services 
. "
AddApplicationServices '
(' (
)( )
;) *
builder 
. 
Services 
. $
ConfigureIdentityService )
() *
builder* 1
.1 2
Configuration2 ?
)? @
;@ A
builder 
. 
Services 
. 
AddCors 
( 
options  
=>! #
{$ %
options 
. 
	AddPolicy 
( 
$str "
," #
builder 
=> 
builder 
. 
AllowAnyOrigin )
() *
)* +
. 	
AllowAnyMethod	 
( 
) 
. 	
AllowAnyHeader	 
( 
) 
) 
; 
} 
) 
; 
var 
app 
= 	
builder
 
. 
Build 
( 
) 
; 
if   
(   
app   
.   
Environment   
.   
IsDevelopment   !
(  ! "
)  " #
)  # $
{!! 
app"" 
."" 

UseSwagger"" 
("" 
)"" 
;"" 
app## 
.## 
UseSwaggerUI## 
(## 
)## 
;## 
}$$ 
app&& 
.&& 
UseMiddleware&& 
<&& 
ExceptionMiddleware&& %
>&&% &
(&&& '
)&&' (
;&&( )
app(( 
.(( 
UseAuthentication(( 
((( 
)(( 
;(( 
app)) 
.)) 
UseAuthorization)) 
()) 
))) 
;)) 
app++ 
.++ 
UseCors++ 
(++ 
$str++ 
)++ 
;++ 
app-- 
.-- 
MapControllers-- 
(-- 
)-- 
;-- 
app// 
.// 
Run// 
(// 
)// 	
;//	 

VC:\cursos\CleanArquitecture\CleanArquitecture\CleanArquitecture.API\WeatherForecast.cs
	namespace 	
CleanArquitecture
 
. 
API 
{ 
public 

class 
WeatherForecast  
{ 
public 
DateTime 
Date 
{ 
get "
;" #
set$ '
;' (
}) *
public 
int 
TemperatureC 
{  !
get" %
;% &
set' *
;* +
}, -
public		 
int		 
TemperatureF		 
=>		  "
$num		# %
+		& '
(		( )
int		) ,
)		, -
(		- .
TemperatureC		. :
/		; <
$num		= C
)		C D
;		D E
public 
string 
? 
Summary 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
} 